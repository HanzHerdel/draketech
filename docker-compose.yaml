version: '3.7'

services:
  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    image: api
    container_name: api
    command: /usr/src/app/node_modules/.bin/nodemon -L index.js
    volumes:
      - ./backend-api:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - mongo
    ports:
      - "5000:5000"
    env_file: .env.docker
    environment:
      - NODE_ENV=development      
      - CHOKIDAR_USEPOLLING= "true"
    networks:
      - app-network

  back-auth:
    build:
      context: ./backend-auth
      dockerfile: Dockerfile
    image: auth
    container_name: auth
    command: npm run dev
    volumes:
      - ./backend-auth:/usr/src/app/
      - /usr/src/app/node_modules
    depends_on: 
      - redis
    ports:
      - "4000:4000"
    env_file: .env.docker
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING= "true"
    networks:
      - app-network    

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend
    container_name: frontend
    command: npm start
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING= "true"
    volumes:
      - ./frontend/:/usr/src/app      
      - /usr/src/app/node_modules
    depends_on:
      - backend-api
    ports:
      - "3000:3000"
    networks:
      - app-network
      
  mongo:
    image: mongo
    container_name: draketech-engine-mongodb
    volumes:
      - data-volume:/data/db
    ports:
      - "27017:27017"
    networks:
      - app-network
  redis:
    image: redis:6.2.5-alpine
    container_name: draketech-engine-redis

    ports:
      - "6379:6379"
    networks:
      - app-network

networks:
    app-network:
        driver: bridge

volumes:
    data-volume:
    node_modules:
